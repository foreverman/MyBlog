---
title: "Restore Session from Cookie"
date: 02/09/2012
description: "Restore Session from Cookie"

In Rails(this article is based on rails 3.0.10), session is stored in cookie by default, but how can you restore the session given the cookie? To get the answer, we have to 
take a look at how cookie session store is implemented in rails:

Here is how rails generates the something from session and write to cookie eventually:
    :::ruby
    module ActiveSupport
      class MessageVerifier
        def generate(value)
          data = ActiveSupport::Base64.encode64s(Marshal.dump(value))
          "#{data}--#{generate_digest(data)}"
        end
      end
    end
Basically it serializes the session, encodes(base64) the serialized data, finally it writes the session in the format of "#{data}--#{generate_digest(data)}" where the 
'generate_digest(data)' is generated digest for serialized-and-encoded session based on a secret which is usually set in config/initializers/secret_token.rb. 
    


And here is how rails load session from cookie:
    :::ruby
    def verify(signed_message)
      raise InvalidSignature if signed_message.blank?

      data, digest = signed_message.split("--")
      if data.present? && digest.present? && secure_compare(digest, generate_digest(data))
        Marshal.load(ActiveSupport::Base64.decode64(data))
      else
        raise InvalidSignature
      end
    end
It reverses serialization-and-encoding process, so it first decode the data from session in cookie, then deserializes session. In addition, it checks integrity of session by comparing the generated
digest and digest in cookie(after "--").

Given a session string stored in cookie: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx--yyyyyyyyyy", here is how to restore the session from it:
    :::ruby
    session = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx--yyyyyyyyyy".split('--').first
    session = Marshal.load(ActiveSupport::Base64.decode64(session))

Another point is session stored in cookie is not encryped, so anyone can crack open the session given the cookie.


