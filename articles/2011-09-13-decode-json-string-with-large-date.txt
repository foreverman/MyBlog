---
title: "Decode JSON String With Large Date"
date: 13/09/2011
description: "Decode JSON string with large date"

I got a 'StandardError: Invalid JSON string' error when I decode a JSON string using ActiveSupport in a 32 bit EC2 server:
    :::ruby
    Loading staging environment (Rails 3.0.10)
    irb(main):001:0> ActiveSupport::JSON.decode("{\"t\":\"2041-09-09T06:47:06Z\"}")
    StandardError: Invalid JSON string: '{"t":"2041-09-09T06:47:06Z"}'
        from /mnt/app/shared/bundle/ruby/1.8/gems/activesupport-3.0.10/lib/active_support/json/backends/yaml.rb:24:in `decode'
        from /mnt/app/shared/bundle/ruby/1.8/gems/activesupport-3.0.10/lib/active_support/json/decoding.rb:14:in `__send__'
        from /mnt/app/shared/bundle/ruby/1.8/gems/activesupport-3.0.10/lib/active_support/json/decoding.rb:14:in `decode'
        from (irb):1

Seems this is an inherent issue when you parse a large time string in 32 bit machine:
    :::ruby
    irb(main):005:0> Time.parse("2041-09-09T06:47:06Z")
    ArgumentError: time out of range
        from /opt/ruby/lib/ruby/1.8/time.rb:180:in `utc'
        from /opt/ruby/lib/ruby/1.8/time.rb:180:in `make_time'
        from /opt/ruby/lib/ruby/1.8/time.rb:243:in `parse'
        from (irb):5

To get a complete understanding about this issue, let's have a look at how ActiveSupport decode a JSON string: 
    :::ruby
    require 'active_support/core_ext/module/attribute_accessors'
    require 'active_support/core_ext/module/delegation'

    module ActiveSupport
      # Look for and parse json strings that look like ISO 8601 times.
      mattr_accessor :parse_json_times

      module JSON
        # Listed in order of preference.
        DECODERS = %w(Yajl Yaml)

        class << self
          attr_reader :parse_error
          delegate :decode, :to => :backend

          def backend
            set_default_backend unless defined?(@backend)
            @backend
          end

          def backend=(name)
            if name.is_a?(Module)
              @backend = name
            else
              require "active_support/json/backends/#{name.to_s.downcase}"
              @backend = ActiveSupport::JSON::Backends::const_get(name)
            end
            @parse_error = @backend::ParseError
          end

          def with_backend(name)
            old_backend, self.backend = backend, name
            yield
          ensure
            self.backend = old_backend
          end

          def set_default_backend
            DECODERS.find do |name|
              begin
                self.backend = name
                true
              rescue LoadError
                # Try next decoder.
                false
              end
            end
          end
        end
      end
    end

As you can see, there are two 'backend's(yaml and yajl) which do real job of json decoding, and the default one is yaml. There is also a configuration option called 'parse_json_times' which should be set to ture if you want to parse json strings that look like ISO 8601 times. Take a look at source code of yaml backend, you will find it doesn't respect 'parse_json_times' configuration, which means it will parse time string whatsoever. YAML library must use 'Time.parse' to parse time string, so we should get 'ArgumentError: time out of range' error. To make things worse, YAML backend swallows all the exception, then just print 'Invalid JSON string:#{JSON string}', this will make it harder to find what and where is invalid in string.

It turns out that there is another backend called 'yajl', so let's have a try on it and see if there is same issue with it. Here is how to use 'yajl' as a decoder instead of yaml:
first, add "gem 'yajl-ruby'" into your gem file and run 'bundle install' to install the gem.
second, add the following code into config/initializers/activesupport_json_decoding.rb:
    :::ruby
    # you can ignore this line cause rails will use first decoder in decoder list
    ActiveSupport::JSON.backend = 'Yajl'
    ActiveSupport.parse_json_times = true   

Good news is Yajl doesn't share the same issue with YAML:
    :::ruby
    irb(main):014:0> ActiveSupport::JSON.decode("{\"t\":\"2041-09-09T06:47:06Z\"}")
    => {"t"=>Mon, 09 Sep 2041 06:47:06 +0000}
   
    


    
   
